/// <reference path="../../../_types/temporal.d.ts" />
/// <reference path="../../../_types/list-format.d.ts" />


import { IRelativeTimeFormatOptions } from '../../relative-time-format.type';

import { IListFormatOptions } from '../../../list-format';
import RelativeTimeFormat = Intl.RelativeTimeFormat;
import { ISubscribeFunction, ISubscribePipeFunction } from '../../../../types';
import { ILocales } from '../../../locales';
import { of } from '../../../../subscribe-function';

type ListFormat = any; // // TODO


/*-----------*/

/*-----------*/



export interface IAdvancedRelativeTimeFormatOptions {
  relativeTimeFormatOptions?: IRelativeTimeFormatOptions;
  listFormatOptions?: IListFormatOptions;
}

// export type IAdvancedRelativeTimeFormatDuration = Temporal['Duration'];

export interface IAdvancedRelativeTimeFormatDuration {
  readonly years: number;
  readonly months: number;
  readonly days: number;
  readonly hours: number;
  readonly minutes: number;
  readonly seconds: number;
}

// export interface IAdvancedRelativeTimeFormatIn {
//   targetDate: Date;
//   currentDate?: Date;
// }

interface IAdvancedRelativeTimeFormatSubscribePipeFormatters {
  relativeTimeFormat: RelativeTimeFormat;
  listFormat: ListFormat;
}

export function advancedRelativeTimeFormatSubscribePipe(
  locales: ISubscribeFunction<ILocales>,
  options: ISubscribeFunction<IAdvancedRelativeTimeFormatOptions> = single({}),
): ISubscribePipeFunction<IAdvancedRelativeTimeFormatDuration, string> {

  const formatters: ISubscribeFunction<IAdvancedRelativeTimeFormatSubscribePipeFormatters> = reactiveFunction(
    [locales, options],
    (locales: ILocales, options: IAdvancedRelativeTimeFormatOptions): IAdvancedRelativeTimeFormatSubscribePipeFormatters => {
      return {
        relativeTimeFormat: new Intl.RelativeTimeFormat(locales as string[], options.relativeTimeFormatOptions),
        listFormat: new (Intl as any).ListFormat(locales as string[], options.listFormatOptions), // TODO
      };
    },
  );

  return (subscribe: ISubscribeFunction<IAdvancedRelativeTimeFormatDuration>): ISubscribeFunction<string> => {
    return reactiveFunction(
      [subscribe, formatters],
      (
        value: IAdvancedRelativeTimeFormatDuration,
        { relativeTimeFormat, listFormat }: IAdvancedRelativeTimeFormatSubscribePipeFormatters,
      ): string => {
        // const years: number = value * MS_TO_YEAR;
        // const years: number = targetDate.get() - currentDate.getFullYear();
        return 'abcdef';
        // return format.format(value, unit);
      },
    );
  };
}


