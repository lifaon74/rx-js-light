import { IRelativeTimeFormatOptions, IRelativeTimeFormatUnit } from '../../relative-time-format.type';
import { of, reactiveFunction } from '../../../../subscribe-function';
import { IListFormatOptions } from '../../../list-format';
import { ILocales } from '../../../locales';
import { ISubscribeFunction, ISubscribePipeFunction } from '../../../../types';
import ListFormat = IntlListFormat.ListFormat;
import RelativeTimeFormat = Intl.RelativeTimeFormat;

// TODO
declare namespace IntlListFormat {
  class ListFormat {
    constructor(locales: string[], options?: IListFormatOptions);

    public format: (items: ArrayLike<string>) => string;
  }
}


/*-----------*/

export type IAdvancedRelativeTimeFormatGranularity = Exclude<IRelativeTimeFormatUnit, 'quarter' | 'quarters'>;


export interface IAdvancedRelativeTimeFormatOptions {
  relativeTimeFormatOptions?: IRelativeTimeFormatOptions;
  listFormatOptions?: IListFormatOptions;
  granularity?: IAdvancedRelativeTimeFormatGranularity;
}

export type IAdvancedRelativeTimeFormatValue = number;
// export interface IAdvancedRelativeTimeFormatIn {
//   targetDate: Date;
//   currentDate?: Date;
// }

interface IAdvancedRelativeTimeFormatSubscribePipeFormatters {
  relativeTimeFormat: RelativeTimeFormat;
  listFormat: ListFormat;
}



export function advancedRelativeTimeFormatSubscribePipe(
  locales: ISubscribeFunction<ILocales>,
  options: ISubscribeFunction<IAdvancedRelativeTimeFormatOptions> = of({}),
): ISubscribePipeFunction<IAdvancedRelativeTimeFormatValue, string> {

  const formatters: ISubscribeFunction<IAdvancedRelativeTimeFormatSubscribePipeFormatters> = reactiveFunction(
    [locales, options],
    (locales: ILocales, options: IAdvancedRelativeTimeFormatOptions): IAdvancedRelativeTimeFormatSubscribePipeFormatters => {
      return {
        relativeTimeFormat: new Intl.RelativeTimeFormat(locales as string[], options.relativeTimeFormatOptions),
        listFormat: new (Intl as any).ListFormat(locales as string[], options.listFormatOptions), // TODO
      };
    },
  );

  return (subscribe: ISubscribeFunction<IAdvancedRelativeTimeFormatValue>): ISubscribeFunction<string> => {
    return reactiveFunction(
      [subscribe, formatters],
      (
        value: IAdvancedRelativeTimeFormatValue,
        { relativeTimeFormat, listFormat }: IAdvancedRelativeTimeFormatSubscribePipeFormatters,
      ): string => {
        // const years: number = value * MS_TO_YEAR;
        // const years: number = targetDate.get() - currentDate.getFullYear();
        return 'abcdef';
        // return format.format(value, unit);
      },
    );
  };
}


