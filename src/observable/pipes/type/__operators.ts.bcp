export function mapObservablePipe<GIn, GOut>(
  mapFunction: IMapFunction<GIn, GOut>,
): IObservablePipe<GIn, GOut> {
  return (subscribe: IObservable<GIn>): IObservable<GOut> => {
    return (emit: IObserver<GOut>): IUnsubscribe => {
      return subscribe((value: GIn): void => {
        emit(mapFunction(value));
      });
    };
  };
}


export function mapObservable<GIn, GOut>(
  subscribe: IObservable<GIn>,
  mapFunction: IMapFunction<GIn, GOut>,
): IObservable<GOut> {
  return (emit: IObserver<GOut>): IUnsubscribe => {
    return subscribe((value: GIn): void => {
      emit(mapFunction(value));
    });
  };
}

/**---*/

export function mapObservable3<GIn, GOut>(
  subscribe: IObservable<GIn>,
  mapFunction: IMapFunction<GIn, GOut>,
): IObservable<GOut> {
  return (emit: IObserver<GOut>): IUnsubscribe => {
    return subscribe(mapObserver(emit, mapFunction));
  };
}

export function mapObservablePipe3<GIn, GOut>(
  mapFunction: IMapFunction<GIn, GOut>,
): IObservablePipe<GIn, GOut> {
  return (subscribe: IObservable<GIn>): IObservable<GOut> => {
    return (emit: IObserver<GOut>): IUnsubscribe => {
      return subscribe(mapObserver(emit, mapFunction));
    };
  };
}

export function mapObservablePipe4<GIn, GOut>(
  mapFunction: IMapFunction<GIn, GOut>,
): IObservablePipe<GIn, GOut> {
  return observerOperatorToObservablePipe(mapObserver, mapFunction);
}


export interface IObservableOperator<GIn, GOut, GArguments extends any[]> {
  (
    subscribe: IObservable<GIn>,
    ...args: GArguments
  ): IObservable<GOut>;
}

export interface IObserverOperator<GIn, GOut, GArguments extends any[]> {
  (
    emit: IObserver<GOut>,
    ...args: GArguments
  ): IObserver<GIn>;
}

export function observerOperatorToObservablePipe<GIn, GOut, GArguments extends any[]>(
  observerOperator: IObserverOperator<GIn, GOut, GArguments>,
  ...args: GArguments
): IObservablePipe<GIn, GOut> {
  return (subscribe: IObservable<GIn>): IObservable<GOut> => {
    return (emit: IObserver<GOut>): IUnsubscribe => {
      return subscribe(observerOperator(emit, ...args));
    };
  };
}

// export function observerOperatorToObservableOperator<GIn, GOut, GArguments extends any[]>(
//   subscribe: IObservable<GIn>,
//   observerOperator: IObserverOperator<GIn, GOut, GArguments>,
// ): IObservableOperator<GIn, GOut, GArguments> {
//   return (subscribe: IObservable<GIn>, ...args: GArguments): IObservable<GOut> => {
//     return (emit: IObserver<GOut>): IUnsubscribe => {
//       return subscribe(observerOperator(emit, ...args));
//     };
//   };
// }

export function observerPipeToObservablePipe<GIn, GOut>(
  observerPipe: IObserverPipe<GIn, GOut>,
): IObservablePipe<GIn, GOut> {
  return (subscribe: IObservable<GIn>): IObservable<GOut> => {
    return (emit: IObserver<GOut>): IUnsubscribe => {
      return subscribe(observerPipe(emit));
    };
  };
}


export function mapObservablePipe2<GIn, GOut>(
  mapFunction: IMapFunction<GIn, GOut>,
): IObservablePipe<GIn, GOut> {
  return (subscribe: IObservable<GIn>): IObservable<GOut> => {
    return (emit: IObserver<GOut>): IUnsubscribe => {
      return subscribe(((emit: IObserver<GOut>): IObserver<GIn> => {
        return (value: GIn): void => {
          emit(mapFunction(value));
        };
      })(emit));
    };
  };
}

// export function mapObserver<GIn, GOut>(
//   emit: IObserver<GOut>,
//   mapFunction: IMapFunction<GIn, GOut>,
// ): IObserver<GIn> {
//   return (value: GIn): void => {
//     emit(mapFunction(value));
//   };
// }
//
// export function mapObserverPipe<GIn, GOut>(
//   mapFunction: IMapFunction<GIn, GOut>,
// ): IObserverPipe<GIn, GOut> {
//   return (emit: IObserver<GOut>): IObserver<GIn> => {
//     return mapObserver<GIn, GOut>(emit, mapFunction);
//   };
// }
